* Rationale
:PROPERTIES:
:DATE:     <2014-05-06 Tue 21:43>
:END:

Tiny-sc addresses many of the same problems as JITlib.  Consequently, some of approaches and solutions of tiny-sc have come to resemble to some degree those of JITlib.  The aim of "JitOps" (operators for JITlib) is to explore the differences and commonalities through code.  To start with, it emulates the coding approach of tiny-sc using JITlib classes, in order to see which parts overlap completely and which differ.

** QUOTE More recent draft for operators
:PROPERTIES:
:DATE:     <2014-05-06 Tue 21:43>
:END:

In a text-chat Yorgos Diapoulis suggested using =>> and then pointed out some similarity with the <<> operator of JITlib.  A step further was to base operators that work with Ndef on variants of <<>.  Here a draft, starting with a summary of existing JITlib operators:

- <>> :: map receiver to proxy input
- <<> :: map proxy to receiver input
- <-- :: play proxy as source of receiver

The implementation of method =<>>= in =NodeProxy= shows that it is equivalent to =<<>= with inverse order of operators.

The task here is to make the above operators, or variants of these, work with arguments other than Ndefs in order to allow shorter coding styles of expressions involving Ndefs.  In general, Ndefs should be replaced by their symbol names.  Additionally, Events could be used instead of Pdefs or Pbinds (in which case the generated objects should be Idefs which permit inheritance and on-the-fly changing of the Pattern of Stream while playing).

To avoid confusion with the functionality of <>> and <<>, and for better clarity, the operators chosen for Ndef are:

- ->> ::  chuck pattern, function, ref (synthdef) to Ndef named with symbol (instead of writing Ndef(\symbol)).
- <<> :: The standard input routing operator of JITlib, but extended to work with symbols instead of having to write Ndef(\symbol)

** Earlier operator draft (to be replaced)
:PROPERTIES:
:DATE:     <2014-05-06 Tue 21:43>
:END:

The operators introduced here are not designed for the end user or for "public distribution.".  This is an internal experiment of the tiny-sc project.  The operator rationale is to make it possible to port all of tiny-sc on to JITLib: Just add @ at the end of every operator in tiny-sc, to make the corresponding experimental jit-op.  So when the time is ready, the JitOps will be converted to the current tiny-sc operators by query replacing >@ with > in order to remove the @ added in JitOps. i.e. =>@ becomes =>, etc.

* Observations
:PROPERTIES:
:DATE:     <2014-05-01 Thu 11:13>
:END:

** EventPattern, Edef compatible with Ndef, Pdef
:PROPERTIES:
:DATE:     <2014-05-01 Thu 11:13>
:END:

#+BEGIN_EXAMPLE
Pdef(\y, EventPattern((dur: 0.1, degree: [1, 2].pseq)));
Pdef(\y).play;
#+END_EXAMPLE

#+BEGIN_EXAMPLE

#+END_EXAMPLE

** SynthTree vs Ndef audio input routing
:PROPERTIES:
:DATE:     <2014-05-01 Thu 11:13>
:END:

#+BEGIN_EXAMPLE

Ndef(\fx1, { RHPF.ar( \in.ar(0 ! 2), \freq.kr(6000), \rq.kr(0.2)) * 10 }).play;
Ndef(\src1, { SinOsc.ar([1, 1.2] * 400, \phase.ar(0 ! 2) * 0.2) });
Ndef(\fx1) <<> Ndef(\src1);

Ndef(\fx2, { RHPF.ar( \in.ar(0 ! 2), \freq.kr(6000), \rq.kr(0.2)) * 10 }).play;
Ndef(\src2, { SinOsc.ar([1, 1.2] * 400, \phase.ar(0 ! 2) * 0.2) }).play;
Ndef(\fx2) <<> Ndef(\src2);

{ RHPF.ar(Inp.ar(numChannels: 2), \freq.kr(6000, 1), \rq.kr(0.2)) * 10 } => \fx3;
{ SinOsc.ar([1, 1.2] * 400, \phase.ar(0 ! 2) * 0.2) } => \src3;
\fx3 =< \src3;

#+END_EXAMPLE
