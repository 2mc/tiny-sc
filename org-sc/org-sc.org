Evaluate text in an org mode file as SuperCollider code.

* Function org-sc-eval

One command, works in two contexts:
1. If inside a src-block, evaluate the contents of the block as SuperCollider code.
2. If inside an org-mode section, evaluate the contents of the section as SuperCollider code

Keyboard shortcut: Command-Meta-x.  (C-M-x).

#+BEGIN_SRC emacs-lisp
  (defun org-sc-eval ()
    "Evaluate contents of org-mode element as SuperCollider code.
  If inside a section, evaluate whole contents of section.
  If inside a src block, evaluate contents of block."
    (interactive)
    (let ((element (org-element-at-point)))
      (cond ((equal (car element) 'src-block)
             (sclang-eval-string (plist-get (cadr element) :value)))
            (t
             (save-excursion
               (save-restriction
                 (widen)
                 (org-back-to-heading)
                 (setq element (cadr (org-element-at-point)))
                 (org-id-get-create)
                 (search-forward ":END:")
                 (end-of-line)
                 (sclang-eval-string
                  (concat
                   "(source_id: '"
                   (org-id-get-create)
                   "', eval_id: UniqueID.next) use: {\n"
                   (buffer-substring
                    (point)
                    (plist-get element :contents-end))
                   "\n}")
                  t)))))))

  (defun org-sc-eval-string-with-id (string &optional replace-p)
    "Eval string in SuperCollider, providing the id of the section
  from which the string originates and the number of times that
  this section has been evaluated as environment variables.
  If replace-p is not nil, then remove all processes from the previous
  evaluation of this section before evaluating the string."
    ;; UNDER DEVELOPMENT


  )

  (defun org-sc-eval-next ()
    "Go to next org-mode section and evaluate its contents as SuperCollider code."
    (interactive)
    (outline-next-heading)
    (org-sc-eval))

  (defun org-sc-eval-previous ()
    "Go to previous org-mode section and evaluate its contents as SuperCollider code."
    (interactive)
    (outline-previous-heading)
    (org-sc-eval))

  (defun org-sc-stop-section-processes ()
    "Stop the nodes, routines, patterns started from the current org-section."
    (interactive)
    (sclang-eval-string
     (concat
      "ProcessRegistry.removeProcessesForID('"
      (org-id-get-create)
      "')")))

  (define-key org-mode-map (kbd "C-M-x") 'org-sc-eval)
  (define-key org-mode-map (kbd "C-M-n") 'org-sc-eval-next)
  (define-key org-mode-map (kbd "C-M-p") 'org-sc-eval-previous)
  ;; this overrides the default binding org-schedule, which I do not use often:
  (define-key org-mode-map (kbd "C-c C-s") 'sclang-main-stop)
  (define-key org-mode-map (kbd "H-C-r") 'sclang-process-registry-gui)
  (define-key org-mode-map (kbd "C-c C-M-.") 'org-sc-stop-section-processes)
#+END_SRC

#+RESULTS:
: sclang-process-registry-gui

Test the above command by typing Command-Meta-x (1)  the cursor inside the src block, and then (2) with the cursor inside the section below, named: =SC Block=.
Test for case 1: src-block:

#+BEGIN_SRC sc
Server.default.postln;
(1..10).postln;
#+END_SRC

Test for case 2:

** SC Block
:PROPERTIES:
:ID:       3EDDDE71-8FCF-42C8-BA29-D77A58668E0C
:END:
(21..30).post
