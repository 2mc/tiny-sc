A simple language for composing event sources and synth sources into trees.

* Preliminary notes about composing patterns and streams
One can compose patterns into a binary operator stream, but once that stream is created,
can one substitute part of the stream with something else?

Apparently yes:

#+BEGIN_EXAMPLE
BinaryOpStream : Stream {
	var >operator, >a, >b;
..
}
#+END_EXAMPLE

(note: Function list will not do.  It does not compose the functions, merely executes them, but separately.

The BinaryOpStream creates a binary tree, so it will be a bit complex to edit it as a sequence, but possible.

one way might be to record the location of each stream added to the tream as a sequence of characters.  E.g.

top stream left: l
top stream right: r

If r is a binary operator,
then its two elements would be:
rl and rr
etc.

* Rough outline for Pattern/Stream composing language

So we would have a way of coding how to edit the tree:

Operations coded as binary operators:
- =+ :: location operator element: Add subtree element as subnode at location with operator
	The operator to be used for creating the new binary tree can be part of the operator:
  - =++ :: Create new tree with + operator
  - =+- :: Create new tree with - operator
  etc.
  (Note: Operators are not added as adverbs because adverbs are used here to specify the address of the branch to operate on.)

- =- :: location...  remove element from subtree.  Note: The other element of the tree takes the place of the binop.
        Note: This operator does not require element argument, so the location is given as first argument (as string or symbol), instead of as adverb.
- =@ :: location newelement: replace element at location

Where the locations are given by an adverb added to the the operator (see http://danielnouri.org/docs/SuperColliderHelp/Language/Adverbs.html or https://github.com/supercollider/supercollider/blob/master/HelpSource/Reference/Adverbs.schelp ).  Nil (no adverb) denotes the top of the tree.

- nil :: The top of the tree.
- "l" :: the top left branch
- "r" :: the top right branch
- "ll" :: the left branch of the top left branch
- "lr" :: the right branch of the top left branch
- "lrl" :: the left branch of the right branch of the top left branch
etc.

One can use binary operators with adverbs for the language.
For example:

: \pub1 =@ pattern1 // put pattern1 at root of source, replacing previous source

: \pub1 =++.l pattern2 // add pattern2 as left subnode of tree, composing with +
:                      // pattern1 becomes: pattern2 + pattern1

: \pub1 =@.r pattern3 // put pattern3 as right subnode of tree, replacing previous
:      // pattern2 + pattern1 becomes: pattern2 + pattern3

: \pub1 =- \l          // remove left subnode
:                      // pattern2 + pattern3 becomes: pattern3

"" respondsTo: '=+'
"" respondsTo: '=-'
"" respondsTo: '=@'

(
a = Pn(1) + Pn(2);
b = a.asStream;
)

* SynthTree: access, interconnect, reorder named synths on all servers

The purpose of SynthTree is to provide access and modification facilities for the structure of a tree of synths, with their busses and groups.

Each node of the tree holds a synth, and if present, the group, and input-output control names and busses.

Each server has one root SynthTree, whose root branch contains the RootNode.  There is one global root tree, that holds the root trees of all servers.

** Access to nodes in the tree

*** Basic access principle: Full path

NOTE: This section is an early version.  Writing the full path of a node in the tree every time is not practical. It is described here to explain the basic principles of node access.  The better alternative is described in the next section, ("Practical access"). The implementation of the second solution is described in section "SynthTree implementation".

Access to a node in the tree is done by a path that is an array of symbols. To access a node of the tree, one sends a path the message .st (SynthTree). The path can be nil (the root node of the default server), a symbol, or an array of symbols. For example:

The root nodes of all servers that are booted is accessed at =\global=.  This holds no synth, but its dictionary has all servers that are booted:
: \global.ts

The root node of the default server:
: [\global, \default].ts

Node named \fx in the default server:
: [\global, \default, \fx].ts

For brevity, [\global, \default] is added to any path that does not start with =\global=, including =nil=, or a symbol (not an array).

Thus:

Access the root node of the default server:
: nil.ts

Access node named =fx= on the default server:

: \fx.ts

Access node named =fx2= on the internal server:

: [\global, \internal, \fx2].ts

*** Practical access: unique global name for each synth per server

It is inconvenient to always have to give the full path to a node to access it.  It would be more convenient if one could access any node just by its name, regardless of the position of the node in the tree.  This feature will require registering all named nodes of each server in a single flat dictionary (one separate dictionary for each server), while also at the same time maintaining the tree structure. So it will add some extra code, but it should be possible to implement.  So =\synth1.st= should work, even if =\synth1= is not placed just behind the root node of the server.  If that is implemented, one would also be able to chuck any synth to any other without giving the full path.

** Adding synths to the tree: The chuck operator (=>)

To add a synth to a tree at the end of one of its branches, chuck it to the path, using the ChucK-style operator "=>".

Add the panSynth at the root node of the default server, and name the new branch in the tree containing the reverbSynth 'pan':
: panSynth => \pan;

Add panSynth after pan in the tree (i.e. before pan in the execution order!), naming the new node 'reverb'.
: reverbSynth => [\pan, \reverb]

** Variants of the ChucK operator: Inserting synths, creating busses and groups

*** Replacing and inserting synths in the node tree
Inspired by the ChucK operator "=>" several variants are designed to distinguish the following cases:

- => :: add synth at location indicated by the path, with input bus(ses) specified by message to path. If no message to path is passed, then no input(s) are created.  If another synth is already placed at that location, replace it, and inherit its busses.  The previous synth is released (to ensure smooth fadeout).  Alternatively, adverbs may specify one of the following ways to treat the previous synth:
  - =>.f :: free
  - =>.p :: pause (run(0))
  - =>.m :: (set its output to the sink bus)
  - =>.<integer> :: If adverb is an integer, the integer specifes the number of channels to be allocated for an input bus that is sent to input named "in".
- =<> :: (shortcut:) like =>, except that a default input is created for control named "in".
- =^ :: insert the new synth between the synth indicated by the path and the synth before it in the tree.  Always create default input 'in' since input is required. Adverb may indicate different name or different number of channels for input.  If both different name and number of channels are required, or if additional inputs are needed, these are specified by sending a message to the symbol naming the new synth.

Note: since =^> inserts between two synths, it will always inherit the busses of the previous synth.  See =^ above.

*** Enclosing synths in groups

The following variants add the sign @ in the middle of the operator to indicate that the synth added should be enclosed in its own group. (This makes it possible o

- =@> :: Enclose synth in group, and append it after last synth in path.
- =<@> :: ...
- =@^ :: ...

** Interconnecting ("Chaining") synths: The reverse chuck (=<)

Left-to-right evaluation in SuperCollider requires that the synths receiving an input be created or accessed before those synths which send an output to them.  This is because the synths which send an output need to know which bus they should send that output to.  Switching their output after their creation would result in a glitch in the sound because of the delay involved in sending the =set= message to set their outputs to the input bus of the receiving synth.  Therefore, when chaining such synths, it is better to create the receiving synth first and the sending synth after it.  This requires two things:

1. Define an operator for chaining, which places the receiving synth to the left and the sending synth to the right.  This operator is the "reverse chuck": =<.
2. Devise a way to store the specs for creating a synth, pass them to the linking method together with the reveiving synth, and then have that method create the synth with the appropriate arguments.  This is done by overloading the chuck operator for strings, arrays and functions, so that strings are interpreted as SynthDef names, arrays as arguments to Synth.new, and functions as receivers of the message "play".

Note: It is possible to reverse the order of execution of a chaine of binary operations or a nested argument call, but that is (a) complicated, (b) also, in the case of operators, would require that the end of the chain be indicated in the code.  This is not a practical solution.

Following examples illustrate the wrong order and the correct order for creating and interconecting synths:

Wrong order:
#+BEGIN_EXAMPLE
"granularSynth" => \granulate;
"reverbSynth" =<> \reverb;
\granulate ==> \reverb; // hypothetical operator sending source to effect
#+END_EXAMPLE

Correct order:
#+BEGIN_EXAMPLE
"reverbSynth" =<> \reverb;
\reverb =< ("granularSynth" => \granulate);
#+END_EXAMPLE

The above correct example, in one line:
: "reverbSynth" =<> \reverb =< ("granularSynth => \granulate);

Example of interconnecting a chain of 3 synths in one line:
: "panSynth" =<> \pan =< ("reverbSynth" =<> \reverb) =< ("granularSynth" => granulate);

** SynthTree implementation

- New class: =IdentityTree= implements a tree with variable length branches, and two methods: =get= for accessing a node and =set= for setting a node of the tree.
- Subclass =SynthTree= implements the SynthTree

** Implementation of =>

method *add;

: aSynthOrSpec => \symbol

Basic components:

Note: st-node means SythTree-node.

1. The st-node to which the synth will chucked.  Obtained from servers[\symbol].  Created if not present.
2. The target st-node, to which the new st-node synth will send its output.  Obtained from ~root.  Note: If ~root is nil, initialize it to an SynthTree instance, with synth the root group of the default server, and bus a bus with index 0.
3. The bus to which the new synth should send its output.  Obtained from the target st-node.
4. The target group in which the synth will be created.

*** Initializing the root node.

*** Auto-restart the entire tree when the server boots?

*** other notes
1. If node is nil, add a new one at level 1 of the tree (just below the root node)
2. Get SynthTree node at \symbol from dictionary at ~target.asTarget.server (defaults to Server.default).
3. Get the
4. if aSynthOrSpec is a Synth, then move it to after the node of the
5.


** Initializing a new synth with the right output bus index

If one creates a synth first and afterwards changes its output, to set it to the bus of a different input, then the synth will output for a short initial interval audibly to the default output bus 0.  This ...

Move previously existing synth to location at path:

: synth => path;

Create synth with SynthDef =\test= at location at path, and set its outputs as needed (see below):

: \test => path;

Create synth at location at path, using extra arguments, and set its outputs as needed (see below):

: [\test, freq: 440, amp: 0.1] => path;

Play

: { WhiteNoise.ar(0.1) } => path;



** Bus allocation

If a synth that is being added to the tree needs to have one or more private busses for input, and these busses have at least one name different than 'in', then that should be indicated by sending the message =withInput= to the path (shorter version of the message for the same method is: =in=?).  The arguments to =withInput= or =in= optionally indicate the names of the inputs for the busses and the number of channels for each bus.  If the number of channels is 1 it can be omitted.

Implementation note: =path.withInput= returns an object that holds the target synth together with the action for creating the bus and new synth.  (Technically, this is a kind of Behavior pattern).

Examples:

Allocate new audio bus with 1 channel, and set the input named =in= of aSynth to the index of the bus:

: aSynth =<> path;

: aSynth => path.in;

or:

: aSynth => path.withInput;

Allocate new audio bus with 2 channels, and set the input named =in= of aSynth to the index of the bus:

: aSynth => path.in(2);

Allocate new audio bus with 1 channel, and set the input named =myInput= of aSynth to the index of the bus:

: aSynth => path.withInput(\myInput);

Allocate new audio bus with 2 channels, and set the input named =myInput= of aSynth to the index of the bus:

: aSynth => path.withInput(\myInput, 2);

Allocate following buses:

- 4 channel input, set to input =quadIn=
- 1 channel input, set to input =monoIn=
- 2 channel input, set to input =stereoIn==
- a previously allocated bus contained in =otherBus=, set to input =other=

: aSynth => path.in(\quadIn, 4, \monoIn, \stereoIn, 2, \other, otherBus);

** Output specification

Conversely, the outputs to which a synth should write can be specified by message =withOutput= (short form: =out=). Per default, SynthTree





** Allocating a group for part of the subtree

Additionally, one may enclose a single synth into a separate group, so that one may control the entire subbranch after that synth with single commands.  For this, use the operator =@>, or the adverb 'g' (=>.g)

: aSynth =@> path // add aSynth after node at path, enclosing it in a Group


To replace a node, we'll use another ChucK-inspired operator: ==^=

What to do with replaced nodes?
- free?
- pause?
- release?
- redirect to "sink bus"?

The default is =release=.

The other options can be indicated by adverbs:

- =^.f :: free
- =^.p :: pause (=.run(0)=)
- =^.r :: run (=.run(1)=)
- =^.s :: silence (redirect to sink group/bus)

** The sink group / bus

** Number of channels in bus allocation



** Additional commands/operators

- =>! :: make the node that was added the default target, so that new synths use it as default target at creation time.

In order to make this work, it is needed to redefine Server:asTarget thus:

: + Server {
: 	asTarget { ^~target ?? { Group.basicNew(this, 1) } }
: }

- Move a node behind another target node
- Move a node before another target node
- Move all subnodes of a node to become subnodes of another target node
- Access a node,
  When accessed, optionally and perform an operation on it (send it a message etc.)
  The optional operation could be specified by adverb.

Candidate symbols for these would be:

=!
=%
=#
=&
=$
